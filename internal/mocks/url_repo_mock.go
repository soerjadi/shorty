// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/soerjadi/short/internal/model"
)

// MockUrlRepository is a mock of Repository interface.
type MockUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryMockRecorder
}

// MockUrlRepositoryMockRecorder is the mock recorder for MockUrlRepository.
type MockUrlRepositoryMockRecorder struct {
	mock *MockUrlRepository
}

// NewMockUrlRepository creates a new mock instance.
func NewMockUrlRepository(ctrl *gomock.Controller) *MockUrlRepository {
	mock := &MockUrlRepository{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepository) EXPECT() *MockUrlRepositoryMockRecorder {
	return m.recorder
}

// DeleteShortURL mocks base method.
func (m *MockUrlRepository) DeleteShortURL(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURL", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURL indicates an expected call of DeleteShortURL.
func (mr *MockUrlRepositoryMockRecorder) DeleteShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURL", reflect.TypeOf((*MockUrlRepository)(nil).DeleteShortURL), ctx, shortURL)
}

// GetListedURL mocks base method.
func (m *MockUrlRepository) GetListedURL(ctx context.Context, req model.URLRequest) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListedURL", ctx, req)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListedURL indicates an expected call of GetListedURL.
func (mr *MockUrlRepositoryMockRecorder) GetListedURL(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListedURL", reflect.TypeOf((*MockUrlRepository)(nil).GetListedURL), ctx, req)
}

// GetLongURL mocks base method.
func (m *MockUrlRepository) GetLongURL(ctx context.Context, longURL string) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongURL", ctx, longURL)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongURL indicates an expected call of GetLongURL.
func (mr *MockUrlRepositoryMockRecorder) GetLongURL(ctx, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongURL", reflect.TypeOf((*MockUrlRepository)(nil).GetLongURL), ctx, longURL)
}

// GetShortURL mocks base method.
func (m *MockUrlRepository) GetShortURL(ctx context.Context, shortURL string) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", ctx, shortURL)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockUrlRepositoryMockRecorder) GetShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockUrlRepository)(nil).GetShortURL), ctx, shortURL)
}

// InsertShortURL mocks base method.
func (m *MockUrlRepository) InsertShortURL(ctx context.Context, url model.URL) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertShortURL", ctx, url)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertShortURL indicates an expected call of InsertShortURL.
func (mr *MockUrlRepositoryMockRecorder) InsertShortURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertShortURL", reflect.TypeOf((*MockUrlRepository)(nil).InsertShortURL), ctx, url)
}
